{"version":3,"sources":["images/rick_morty_logo.png","components/Header.js","components/FilterByName.js","components/FilterBySpecies.js","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","components/CharacterNotFound.js","components/Footer.js","services/api.js","services/localStorage.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","imgHeader","alt","title","FilterByName","props","type","name","id","value","filterName","placeholder","onChange","ev","handleFilter","target","key","FilterBySpecies","filterSpecies","Filters","onClick","preventDefault","CharacterCard","to","characterData","picture","species","CharacterList","characterElement","characters","length","map","character","CharacterDetail","status","origin","episode","CharacterNotFound","Footer","getApiData","fetch","then","response","json","data","cleanData","results","image","sort","a","b","objToExport","get","defaultData","localStorage","getItem","JSON","parse","set","setItem","stringify","App","useState","localSt","setCharacters","setFilterName","setFilterSpecies","useEffect","filteredCharacters","filter","toLowerCase","includes","exact","path","render","routerCharacterId","match","params","characterId","foundCharacter","find","parseInt","console","log","undefined","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.03ea3918.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rick_morty_logo.de13d484.png\";","import imgHeader from \"../images/rick_morty_logo.png\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header-text\">Rick and Morty</h1>\r\n      <img\r\n        className=\"header-img\"\r\n        src={imgHeader}\r\n        alt=\"Rick and Morty\"\r\n        title=\"Rick and Morty\"\r\n      />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const FilterByName = (props) => {\r\n  const handleName = (ev) => {\r\n    //función para pasar los datos limpios a App\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n      key: \"name\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"form__input name\"\r\n      type=\"text\"\r\n      name=\"name\"\r\n      id=\"name\"\r\n      value={props.filterName}\r\n      placeholder=\"Character's name\"\r\n      onChange={handleName}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterByName;\r\n","const FilterBySpecies = (props) => {\r\n  const handleSpecies = (ev) => {\r\n    //función para pasar los datos limpios a App\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n      key: \"species\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"form__input species\"\r\n      type=\"text\"\r\n      name=\"species\"\r\n      id=\"species\"\r\n      value={props.filterSpecies}\r\n      placeholder=\"Species\"\r\n      onChange={handleSpecies}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterBySpecies;\r\n","import FilterByName from \"./FilterByName\";\r\nimport FilterBySpecies from \"./FilterBySpecies\";\r\n\r\nconst Filters = (props) => {\r\n  const handleForm = (ev) => {\r\n    ev.preventDefault();\r\n  };\r\n  return (\r\n    <form className=\"main__form\" onClick={handleForm}>\r\n      <FilterByName\r\n        filterName={props.filterName}\r\n        handleFilter={props.handleFilter}\r\n      />\r\n      <FilterBySpecies\r\n        filterSpecies={props.filterSpecies}\r\n        handleFilter={props.handleFilter}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst CharacterCard = (props) => {\r\n  return (\r\n    <Link to={`/character/${props.characterData.id}`}>\r\n      <article className=\"character__list-item\">\r\n        <img\r\n          className=\"character-pic\"\r\n          src={props.characterData.picture}\r\n          alt={props.characterData.name}\r\n        />\r\n\r\n        <h2 className=\"character-name\">{props.characterData.name}</h2>\r\n        <p className=\"character-species\">{props.characterData.species}</p>\r\n      </article>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default CharacterCard;\r\n","import CharacterCard from \"./CharacterCard\";\r\n\r\nconst CharacterList = (props) => {\r\n  let characterElement = \"\";\r\n\r\n  if (props.characters.length !== 0) {\r\n    characterElement = props.characters.map((character) => {\r\n      return (\r\n        <li className=\"character__list__item\" key={character.id}>\r\n          <CharacterCard characterData={character} />\r\n        </li>\r\n      );\r\n    });\r\n  } else {\r\n    characterElement = <h2>Character not found</h2>;\r\n  }\r\n  return (\r\n    <section className=\"results-section\">\r\n      <ul className=\"character__list\">{characterElement}</ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CharacterList;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst CharacterDetail = (props) => {\r\n  return (\r\n    <main className=\"card-detail-container\">\r\n      <Link className=\"return-link\" to=\"/\">\r\n        Go back\r\n      </Link>\r\n      <div className=\"main-detail\">\r\n        <section className=\"mid-section-card-left\">\r\n          <img src={props.character.picture} alt=\"nombre\" />\r\n        </section>\r\n        <section className=\"mid-section-card-right\">\r\n          <h2 className=\"detail-title\">{props.character.name}</h2>\r\n          <ul className=\"list-detail\">\r\n            <li className=\"list-detail__item\">\r\n              Status:\r\n              {props.character.status}\r\n            </li>\r\n            <li className=\"list-detail__item\">\r\n              Species: {props.character.species}\r\n            </li>\r\n            <li className=\"list-detail__item\">\r\n              Origin: {props.character.origin}\r\n            </li>\r\n            <li className=\"list-detail__item\">\r\n              Number of episodes: {props.character.episode}\r\n            </li>\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default CharacterDetail;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst CharacterNotFound = () => {\r\n  return (\r\n    <>\r\n      <main className=\"not-found-main\">\r\n        <div className=\"not-found-background\"></div>\r\n        <Link className=\"return-link\" to=\"/\">\r\n          Try again\r\n        </Link>\r\n        <h2 className=\"not-found-text\">\r\n          The character you are looking for is not in this dimension...\r\n        </h2>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CharacterNotFound;\r\n","const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <small className=\"footer__rights\">\r\n        <span className=\"rights__item\">&copy;2021</span>\r\n      </small>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","//limpieza data\r\n//tarjetas:\r\n//id\r\n//img\r\n//nombre\r\n//especie\r\n\r\n//detalle:\r\n//id -ya lo tengo\r\n//name -ya lo tengo\r\n//especie -ya lo tengo\r\n//estado\r\n//origen\r\n//episodios - me falta, necesito recorrer array\r\n\r\nconst getApiData = () => {\r\n  return fetch(\"https://rickandmortyapi.com/api/character\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const cleanData = data.results.map((character) => {\r\n        return {\r\n          name: character.name,\r\n          id: character.id,\r\n          picture: character.image,\r\n          species: character.species,\r\n          status: character.status,\r\n          origin: character.origin.name,\r\n          episode: character.episode.length,\r\n        };\r\n      });\r\n      cleanData.sort(function (a, b) {\r\n        if (a.name > b.name) {\r\n          return 1;\r\n        }\r\n        if (a.name < b.name) {\r\n          return -1;\r\n        }\r\n        // a must be equal to b\r\n        return 0;\r\n      });\r\n      return cleanData;\r\n    });\r\n};\r\n\r\nexport default getApiData;\r\n","const set = (key, value) => {\r\n  //tengo que asignar nuevo nombre y el elemento que quiero guardar\r\n  //función\r\n  localStorage.setItem(key, JSON.stringify(value));\r\n};\r\n\r\nconst get = (key, defaultData) => {\r\n  //solo recibe nombre que yo le he asignado\r\n  //función\r\n  const data = localStorage.getItem(key);\r\n  if (data === null) {\r\n    //condición\r\n    return defaultData; //defaultData equivale a un array vacío en app, función en la const charactersLocalStData\r\n  } else {\r\n    return JSON.parse(data);\r\n  }\r\n};\r\n\r\nconst objToExport = {\r\n  get: get,\r\n  set: set,\r\n};\r\nexport default objToExport;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\n//estilos\nimport \"../stylesheet/App.scss\";\nimport \"../stylesheet/reset.scss\";\n\n//estructura web\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport CharacterList from \"./CharacterList\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport CharacterNotFound from \"./CharacterNotFound\";\nimport Footer from \"./Footer\";\n\n//servicios\nimport getApiData from \"../services/api\";\nimport localSt from \"../services/localStorage\";\n\nconst App = () => {\n  //const charactersLocalStData = localSt.get(\"characters\", []); //aquí controlo cuándo recoger los datos del local con el get. Declaro en array vacío para que la función no me retorne undefined y se rompa cuando llamo a characters al principio\n\n  //estados\n\n  const [characters, setCharacters] = useState(localSt.get(\"characters\", [])); // estado de datos y llamo a localStorage para que recoja los datos de characters\n  const [filterName, setFilterName] = useState(localSt.get(\"filterName\", \"\"));\n\n  const [filterSpecies, setFilterSpecies] = useState(\n    localSt.get(\"filterSpecies\", \"\")\n  );\n\n  //effects\n\n  useEffect(() => {\n    //ejecuta cosas en el montaje\n    if (characters.length === 0) {\n      //si el array de personajes está vacío, llama a la API\n      getApiData().then((characterData) => {\n        setCharacters(characterData);\n      });\n    }\n  }, []); //parámetro que nos indica cuándo se debe ejecturar el use effect\n\n  useEffect(() => {\n    localSt.set(\"characters\", characters);\n  }, [characters]);\n\n  useEffect(() => {\n    localSt.set(\"name\", filterName);\n  }, [filterName]);\n\n  useEffect(() => {\n    localSt.set(\"species\", filterSpecies);\n  }, [filterSpecies]);\n\n  //event handlers\n\n  const handleFilter = (data) => {\n    //función general para todos los filtros\n\n    if (data.key === \"name\") {\n      setFilterName(data.value);\n    } else if (data.key === \"species\") {\n      setFilterSpecies(data.value);\n    }\n  };\n\n  //render - pintado\n\n  const filteredCharacters = characters\n    .filter((character) => {\n      return character.name.toLowerCase().includes(filterName.toLowerCase());\n    })\n    .filter((character) => {\n      return character.species\n        .toLowerCase()\n        .includes(filterSpecies.toLowerCase());\n    });\n\n  const renderCharacterDetail = (props) => {\n    // renderear con rutas\n    const routerCharacterId = props.match.params.characterId;\n    const foundCharacter = characters.find((character) => {\n      return character.id === parseInt(routerCharacterId);\n    }); //parseInt(routerCharacterId)\n    console.log(\"router props\", routerCharacterId, foundCharacter);\n\n    if (foundCharacter !== undefined) {\n      //si no lo encuentra en el array\n      return <CharacterDetail character={foundCharacter} />;\n    } else {\n      return <CharacterNotFound />;\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <main className=\"main\">\n            <Filters\n              filterName={filterName}\n              filterSpecies={filterSpecies}\n              handleFilter={handleFilter}\n            />\n\n            <CharacterList characters={filteredCharacters} />\n          </main>\n        </Route>\n        <Route path=\"/character/:characterId\" render={renderCharacterDetail} />\n        <Route path=\"*\" component={CharacterNotFound} />\n      </Switch>\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}